apply plugin: 'com.android.application'

ext {
    versionMajor = 1
    versionMinor = 0
    versionPatch = 0
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.8.1'
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation 'androidx.core:core:1.15.0'
    implementation 'org.greenrobot:eventbus:3.3.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'
}

android {
    namespace 'com.github.pennrobotics.shuredroid'
    compileSdk 35

    defaultConfig {
        applicationId 'com.github.pennrobotics.shuredroid'
        minSdk 21
        targetSdk 35
        versionCode computeVersionCode()
        versionName computeVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**']
        }
        resources {
            pickFirsts += ['**']
        }
    }
}

/*
task adbConfig(type: Exec) {
    commandLine 'adb', 'connect', '192.168.1.45:5555'
}
task tst(dependsOn: ['adbConfig', 'connectedAndroidTest']) {
} */

def computeVersionName() {
    return String.format('%d.%d.%d', versionMajor, versionMinor, versionPatch)
}

def computeVersionCode() {
    return (versionMajor * 10000) + (versionMinor * 100) + versionPatch;
}
